{
    "cid": "Drush\\Commands\\ValidatorsCommands",
    "data": {
        "validateEntityLoad": {
            "schema": 4,
            "class": "Drush\\Commands\\ValidatorsCommands",
            "method_name": "validateEntityLoad",
            "mtime": 1581269391,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\CommandData"
            ],
            "name": "validate:entity-load",
            "description": "Validate that passed entity names are valid.",
            "help": "",
            "aliases": [],
            "annotations": {
                "see": "\\Drush\\Commands\\core\\ViewsCommands::execute for an example.",
                "hook": "validate @validate-entity-load"
            },
            "example_usages": [],
            "return_type": "\\Consolidation\\AnnotatedCommand\\CommandError|null",
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        },
        "validateModuleEnabled": {
            "schema": 4,
            "class": "Drush\\Commands\\ValidatorsCommands",
            "method_name": "validateModuleEnabled",
            "mtime": 1581269391,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\AnnotationData",
                "Symfony\\Component\\Console\\Input\\Input"
            ],
            "name": "validate:module-enabled",
            "description": "Validate that passed module names are enabled. We use pre-init phase because interact() methods run early and they need to know that their module is enabled (e.g. image-flush).",
            "help": "",
            "aliases": [],
            "annotations": {
                "see": "\\Drush\\Commands\\core\\WatchdogCommands::show for an example.",
                "hook": "pre-init @validate-module-enabled"
            },
            "example_usages": [],
            "return_type": "\\Consolidation\\AnnotatedCommand\\CommandError|null",
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        },
        "validateFileExists": {
            "schema": 4,
            "class": "Drush\\Commands\\ValidatorsCommands",
            "method_name": "validateFileExists",
            "mtime": 1581269391,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\CommandData"
            ],
            "name": "validate:file-exists",
            "description": "Validate that the file path exists.",
            "help": "Annotation value should be the name of the argument containing the path.",
            "aliases": [],
            "annotations": {
                "hook": "validate @validate-file-exists"
            },
            "example_usages": [],
            "return_type": "\\Consolidation\\AnnotatedCommand\\CommandError|null",
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        },
        "validatePHPExtension": {
            "schema": 4,
            "class": "Drush\\Commands\\ValidatorsCommands",
            "method_name": "validatePHPExtension",
            "mtime": 1581269391,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\CommandData"
            ],
            "name": "validate:phpextension",
            "description": "Validate that required PHP extension exists.",
            "help": "Annotation value should be extension name. If multiple, delimit by a comma.",
            "aliases": [],
            "annotations": {
                "hook": "validate @validate-php-extension"
            },
            "example_usages": [],
            "return_type": "\\Consolidation\\AnnotatedCommand\\CommandError|null",
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        },
        "validatePermissions": {
            "schema": 4,
            "class": "Drush\\Commands\\ValidatorsCommands",
            "method_name": "validatePermissions",
            "mtime": 1581269391,
            "injected_classes": [
                "Consolidation\\AnnotatedCommand\\CommandData"
            ],
            "name": "validate:permissions",
            "description": "Validate that the permission exists.",
            "help": "Annotation value should be the name of the argument\/option containing the permission(s).",
            "aliases": [],
            "annotations": {
                "hook": "validate @validate-permissions"
            },
            "example_usages": [],
            "return_type": "\\Consolidation\\AnnotatedCommand\\CommandError|null",
            "arguments": {
                "commandData": {
                    "description": ""
                }
            },
            "options": []
        }
    },
    "created": 1599741432,
    "expire": 0
}