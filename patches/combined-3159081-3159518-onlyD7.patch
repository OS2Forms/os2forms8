diff --git a/src/Plugin/migrate/source/d7/D7Webform.php b/src/Plugin/migrate/source/d7/D7Webform.php
index 13f8dc4..e32b056 100644
--- a/src/Plugin/migrate/source/d7/D7Webform.php
+++ b/src/Plugin/migrate/source/d7/D7Webform.php
@@ -322,7 +322,8 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
         $element['value'] = $this->replaceTokens($element['value']);
       }
 
-      $markup = $indent . $element['form_key'] . ":\n";
+      $element_form_key = strtolower($element['form_key']);
+      $markup = $indent . $element_form_key . ":\n";
       switch ($element['type']) {
         case 'fieldset':
           if ($multiPage && empty($current_page_title)) {
@@ -452,7 +453,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
 
         case 'pagebreak':
           $output = str_replace('{' . $current_page . '_title}', $current_page_title, $output);
-          $current_page = $element['form_key'];
+          $current_page = $element_form_key;
           $markup .= "$indent  '#type': webform_wizard_page\n  '#open': true\n  '#title': {" . $current_page . "_title}\n";
           $current_page_title = t('Page') . ' ' . $pageCnt++;
           break;
@@ -495,7 +496,9 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
           foreach ($values as $value) {
             foreach ($value as $name => $item) {
               $markup .= "$indent      " . Yaml::dump($name, 2, 2) . ":\n";
-              $markup .= "$indent        " . Yaml::dump($item, 2, 2);
+              foreach (explode("\n", Yaml::dump($item, 2, 2)) as $line) {
+                $markup .= "$indent        " . $line . "\n";
+              }
             }
           }
         }
@@ -547,6 +550,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
     $states = [];
     if (!empty($conditions)) {
       foreach ($conditions as $condition) {
+        $unsupported_condition = FALSE;
         // Element states.
         switch ($condition['action']) {
           case 'show':
@@ -558,17 +562,21 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
             break;
 
           case 'set':
-            // Nothing found in D8 :(.
+            $element_state = 'set|' . str_replace(' ', '&nbsp;', htmlentities($condition['argument']));
             break;
         }
         // Condition states.
         $operator_value = $condition['value'];
         $depedent = $elements[$condition['source']];
         $depedent_extra = unserialize($depedent['extra']);
+        // Checkboxes conditions handled by definition of checked value
+        // inside state key. This flag will help detenmine checkboxes element.
+        $is_checkboxes = $depedent['type'] == 'select' && empty($depedent_extra['aslist']) && $depedent_extra['multiple'];
         switch ($condition['operator']) {
           case 'equal':
             $element_condition = ['value' => $operator_value];
-            if ($depedent['type'] == 'select' && !$depedent_extra['aslist']) {
+            // Specially handle the checkboxes.
+            if ($is_checkboxes) {
               $element_condition = ['checked' => TRUE];
             }
             break;
@@ -577,17 +585,26 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
             // There is no handler for this in D8 so we do the reverse.
             $element_state = $condition['invert'] ? 'visible' : 'invisible';
             $element_condition = ['value' => $operator_value];
-            // Specially handle the checkboxes, radios.
-            if ($depedent['type'] == 'select' && !$depedent_extra['aslist']) {
+            // Specially handle the checkboxes.
+            if ($is_checkboxes) {
               $element_condition = ['checked' => TRUE];
             }
             break;
 
           case 'less_than':
+            $element_condition = ['value' => ['less' => $operator_value]];
+            break;
+
           case 'less_than_equal':
+            $element_condition = ['value' => ['less_equal' => $operator_value]];
+            break;
+
           case 'greater_than':
+            $element_condition = ['value' => ['greater' => $operator_value]];
+            break;
+
           case 'greater_than_equal':
-            // Nothing in D8 to handle these.
+            $element_condition = ['value' => ['greater_equal' => $operator_value]];
             break;
 
           case 'empty':
@@ -609,14 +626,16 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
             break;
         }
 
-        $depedent_extra_items = explode("\n", trim($depedent_extra['items']));
-        if (!$depedent_extra['aslist'] && $depedent_extra['multiple'] && count($depedent_extra_items) > 1) {
-          $depedent['form_key'] = $depedent['form_key'] . "[$operator_value]";
+        $dependent_form_key = strtolower($depedent['form_key']);
+        if (!empty($operator_value) && $is_checkboxes) {
+          // Checkboxes conditions handled by definition of checked value
+          // inside state key. Adding value as part state key.
+          $dependent_form_key = $dependent_form_key . "[$operator_value]";
         }
-        elseif (!$depedent_extra['aslist'] && !$depedent_extra['multiple']) {
-          $depedent['form_key'] = $depedent['form_key'] . "[$operator_value]";
+
+        if (!$unsupported_condition) {
+          $states[$element_state][] = [':input[name="' . $dependent_form_key . '"]' => $element_condition];
         }
-        $states[$element_state][] = [':input[name="' . $depedent['form_key'] . '"]' => $element_condition];
       }
       if (empty($states)) {
         return FALSE;
