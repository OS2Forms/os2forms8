<?php

/**
 * @file
 * OS2Forms functionality module.
 */

use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Row;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_build().
 *
 * Adding os2forms_settings for to webform.
 */
function os2forms_entity_type_build(array &$entity_types) {
  $entity_types['webform']->setFormClass('os2forms_settings', 'Drupal\os2forms\Form\WebformSettingsForm');
}

/**
 * Implements hook_webform_third_party_settings_form_alter().
 */
function os2forms_webform_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
  // OS2Forms.
  $form['third_party_settings']['os2forms'] = [
    '#type' => 'details',
    '#title' => t('OS2Forms'),
    '#open' => TRUE,
    '#description' => t('OS2Forms related settings'),
  ];
}

/**
 * Implements hook_webform_admin_third_party_settings_form_alter().
 */
function os2forms_webform_admin_third_party_settings_form_alter(&$form, FormStateInterface $form_state) {
  $form['third_party_settings']['os2forms'] = [
    '#type' => 'details',
    '#title' => t('OS2Forms'),
  ];
  /** @var \Drupal\webform\WebformThirdPartySettingsManagerInterface $third_party_settings_manager */
  $third_party_settings_manager = \Drupal::service('webform.third_party_settings_manager');
  $webform_entity_storage = \Drupal::service('entity_type.manager')->getStorage('webform');

  $form['third_party_settings']['os2forms']['migrate_to_category'] = [
    '#type' => 'webform_select_other',
    '#title' => t('Migrate webforms to category'),
    '#description' => t('After migration webforms will get this category.'),
    '#options' => $webform_entity_storage->getCategories(),
    '#empty_value' => '',
    '#default_value' => $third_party_settings_manager->getThirdPartySetting('os2forms', 'migrate_to_category') ?: NULL,
  ];
}

/**
 * Implements hook_theme().
 */
function os2forms_theme() {
  return [
    'webform_handler_save_to_file_summary' => [
      'variables' => ['settings' => NULL, 'handler' => NULL],
    ],
  ];
}

/**
 * Implements hook_webform_migrate_d7_webform_element_ELEMENT_TYPE_alter().
 *
 * Adjusts migration from Drupal 7.
 *
 * @See https://www.drupal.org/project/webform_migrate/issues/3155073
 */
function os2forms_webform_migrate_d7_webform_element_date_popup_alter(&$markup, $indent, array $element) {
  $markup .= "$indent  '#type': date\n";
  $markup .= "$indent  '#datepicker': true\n";
  $markup .= "$indent  '#date_date_format': d/m/Y\n";

  $extra = unserialize($element['extra'], ['allowed_classes' => FALSE]);
  $options = [
    'disabled',
    'readonly',
    'placehoder',
    'description',
  ];
  foreach ($options as $option) {
    if (!empty($extra[$option])) {
      $value = 'true';
      switch ($option) {
        case 'description':
        case 'placeholder':
          $value = "\"" . str_replace(['"', "\n", "\r"], ["'", '\n', ''], $extra[$option]) . "\"";
          break;
      }
      $markup .= "$indent  #$option: $value\n";
    }
  }
}

/**
 * Implements hook_webform_migrate_d7_webform_element_ELEMENT_TYPE_alter().
 *
 * Adjusts migration from Drupal 7.
 *
 * @See https://www.drupal.org/project/webform_migrate/issues/3155073
 */
function os2forms_webform_migrate_d7_webform_element_bt_layout_row_alter(&$markup, $indent, array $element) {
  $markup .= "$indent  '#type': webform_flexbox\n";

  $extra = unserialize($element['extra'], ['allowed_classes' => FALSE]);
  if (!empty($extra['description'])) {
    $value = "\"" . str_replace(['"', "\n", "\r"], ["'", '\n', ''], $extra['description']) . "\"";
    $markup .= "$indent  #description: $value\n";
  }
}

/**
 * Implements hook_webform_migrate_d7_webform_element_ELEMENT_TYPE_alter().
 *
 * Adjusts migration from Drupal 7.
 *
 * @See https://www.drupal.org/project/webform_migrate/issues/3155073
 */
function os2forms_webform_migrate_d7_webform_element_bt_layout_cols_alter(&$markup, $indent, array $element) {
  $markup .= "$indent  '#type': container\n";
  $extra = unserialize($element['extra'], ['allowed_classes' => FALSE]);
  if (!empty($extra['description'])) {
    $value = "\"" . str_replace(['"', "\n", "\r"], ["'", '\n', ''], $extra['description']) . "\"";
    $markup .= "$indent  #description: $value\n";
  }
}

/**
 * Implements hook_migrate_prepare_row().
 */
function os2forms_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  _os2forms_migrate_prepare_row_pdf($row, $source, $migration);
  _os2forms_migrate_prepare_row_doc($row, $source, $migration);
  /** @var \Drupal\webform\WebformThirdPartySettingsManagerInterface $third_party_settings_manager */
  $migrate_to_category = \Drupal::service('webform.third_party_settings_manager')->getThirdPartySetting('os2forms', 'migrate_to_category');
  if (!empty($migrate_to_category)) {
    $row->setDestinationProperty('category', $migrate_to_category);
  }
}

/**
 * Implements support of PDF attachment migration.
 */
function _os2forms_migrate_prepare_row_pdf(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  // Adding migration path for Webform PDF Entity print attachment.
  $nid = $row->getSourceProperty('nid');
  $default = $source->getDatabase()->select('webform2pdf', 'w2p')
    ->fields('w2p')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($default['data'])) {
    $data = unserialize($default['data'], ['allowed_classes' => FALSE]);
    unset($default['data']);
    $default = array_merge($default, $data);
  }

  if (empty($default['enabled'])) {
    return;
  }

  $of_default = $source->getDatabase()->select('os2forms_frontend_webform_settings', 'of')
    ->fields('of')
    ->condition('nid', $nid, '=')
    ->condition('submodule', 'os2forms_webform2pdf', '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($of_default['data'])) {
    $data = unserialize($of_default['data'], ['allowed_classes' => FALSE]);
    unset($of_default['data']);
    $default = array_merge($of_default, $data);
  }

  $markup = "webform_attachment_pdf:\n";
  $markup .= "  '#title': 'PDF Attachment'\n";
  $markup .= "  '#type': webform_entity_print_attachment:pdf\n";
  $filename = 'webform_submission-[webform:id]-[webform_submission:sid].pdf';
  if ($default['custom_pdf_name']) {
    $filename = str_replace(
      ['@nid', '@sid'],
      ['[webform:id]', '[webform_submission:sid]'],
      $data['custom_pdf_name']
    );
  }
  $markup .= "  '#filename': '$filename'\n";
  $template = _os2forms_migrate_prepare_webform2pdf_get_template($nid, $source);
  if ($template) {
    $template_arr = explode("\n", $template);
    $markup .= "  '#view_mode': twig\n";
    $markup .= "  '#template': |\n    " . implode("\n    ", $template_arr) . "\n";
  }

  // Saving new form element.
  $elements = $row->getSourceProperty('elements');
  $elements .= $markup;
  $row->setSourceProperty('elements', $elements);
  $dependencies = $row->getDestinationProperty('dependencies');
  if (empty($dependencies) || !array_search('os2forms', $dependencies)) {
    $dependencies['module'][] = 'os2forms';
    $row->setDestinationProperty('dependencies', $dependencies);
  }
}

/**
 * Implements support of DOC attachment migration.
 */
function _os2forms_migrate_prepare_row_doc(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  // Adding migration path for Webform DOC Entity print attachment.
  $nid = $row->getSourceProperty('nid');
  $default = $source->getDatabase()->select('os2forms_frontend_webform_settings', 'of')
    ->fields('of')
    ->condition('nid', $nid, '=')
    ->condition('submodule', 'os2forms_doc', '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($default['data'])) {
    $data = unserialize($default['data'], ['allowed_classes' => FALSE]);
    unset($default['data']);
    $default = array_merge($default, $data);
  }

  if (empty($default['enabled'])) {
    return;
  }

  $markup = "webform_attachment_docx:\n";
  $markup .= "  '#title': 'PDF Attachment'\n";
  $markup .= "  '#type': webform_entity_print_attachment:word_docx\n";
  $markup .= "  '#filename': 'webform_submission-[webform:id]-[webform_submission:sid].docx'\n";
  $template = _os2forms_migrate_prepare_webform2pdf_get_template($nid, $source);
  if ($template) {
    $template_arr = explode("\n", $template);
    $markup .= "  '#view_mode': twig\n";
    $markup .= "  '#template': |\n    " . implode("\n    ", $template_arr) . "\n";
  }

  // Saving new form element.
  $elements = $row->getSourceProperty('elements');
  $elements .= $markup;
  $row->setSourceProperty('elements', $elements);

  $dependencies = $row->getDestinationProperty('dependencies');
  if (empty($dependencies) || !array_search('os2forms', $dependencies)) {
    $dependencies['module'][] = 'os2forms';
    $row->setDestinationProperty('dependencies', $dependencies);
  }
}

/**
 * Preprocesses PDF template for webform.
 */
function _os2forms_migrate_prepare_webform2pdf_get_template($nid, $source) {
  $template = &drupal_static(__FUNCTION__ . '_' . $nid, FALSE);
  if ($template) {
    return $template;
  }
  $settings = $source->getDatabase()->select('webform2pdf', 'w2p')
    ->fields('w2p')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  if (!empty($settings['data'])) {
    $data = unserialize($settings['data'], ['allowed_classes' => FALSE]);
    unset($settings['data']);
    $settings = array_merge($settings, $data);
  }

  if (empty($settings['p_body']['value'])) {
    return FALSE;
  }
  $template = $settings['p_body']['value'];

  // Due to changed form_keys we should replace old form_key to new one.
  // Collecting mapping array for form_keys.
  $query = $source->getDatabase()->select('webform_component', 'wc');
  $query->fields('wc', [
    'pid',
    'form_key',
  ]);
  $components = $query->condition('nid', $nid)->execute();
  $keys = [];
  foreach ($components as $component) {
    $keys[$component->form_key] = $component->form_key . ($component->pid ? '_' . $component->pid : '');
  }

  // Replacing D7 webform tokens to D8.
  $template = str_replace('[submission:', '[webform_submission:', $template);
  foreach ($keys as $old_key => $new_key) {
    $template = str_replace(':' . $old_key . ']', ':' . $new_key . ']', $template);
    $template = str_replace(':' . $old_key . ':', ':' . $new_key . ':', $template);
  }

  // Check valid tokens.
  preg_match_all('/\[(.*)\]/', $template, $matches);
  $tokens = array_unique($matches[0]);
  $valid_tokens = array_filter($tokens, function ($token) {
    return empty(\Drupal::token()->getInvalidTokensByContext($token, [
      0 => 'webform',
      1 => 'webform_submission',
      2 => 'webform_handler',
      3 => 'site',
      4 => 'date',
    ]));
  });

  // Making tokens available for twig template.
  foreach ($valid_tokens as $token) {
    $template = str_replace($token, "{{ webform_token('" . $token . "', webform_submission, [], options) }}", $template);
    $unset_key = array_search($token, $tokens);
    unset($tokens[$unset_key]);
  }

  // Removing invalid tokens.
  foreach ($tokens as $invalid_token) {
    $template = str_replace($invalid_token, '', $template);
  }

  return $template;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function os2forms_menu_local_tasks_alter(&$data, $route_name) {
  $webform = \Drupal::routeMatch()->getParameter('webform');
  $routeName = \Drupal::routeMatch()->getRouteName();
  if ($webform && $routeName == $route_name) {
    if (is_object($webform)) {
      $webform = $webform->id();
    }
    if (isset($data['tabs'][0]['entity.webform.embed']) && !\Drupal::currentUser()->hasPermission('os2forms embed webform access')) {
      unset($data['tabs'][0]['entity.webform.embed']);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function os2forms_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'menu_local_tasks_alter':
      $group = $implementations['os2forms'];
      unset($implementations['os2forms']);
      $implementations['os2forms'] = $group;
      break;
  }
}
